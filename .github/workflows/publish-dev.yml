name: Publish Dev Build

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering for testing

jobs:
  get-version:
    name: Get dev version
    runs-on: ubuntu-latest
    # Only run if CI succeeded (or manual trigger)
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Calculate dev version
        id: version
        run: |
          # Read base version from workspace Cargo.toml
          BASE_VERSION=$(grep -m1 '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          # Create dev version using GitHub run number
          # Use hyphen format for Cargo (maturin converts to .dev for Python)
          DEV_VERSION="${BASE_VERSION}-dev${{ github.run_number }}"
          echo "Base version: $BASE_VERSION"
          echo "Dev version: $DEV_VERSION"
          echo "version=$DEV_VERSION" >> $GITHUB_OUTPUT

  build-wheels:
    name: Build wheels on ${{ matrix.platform.os }}
    needs: get-version
    runs-on: ${{ matrix.platform.runner }}
    permissions:
      contents: read
      id-token: write

    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            os: linux
          - runner: macos-13  # x86_64
            os: macos
          - runner: macos-14  # ARM64
            os: macos-arm
          - runner: windows-latest
            os: windows

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set dev version
        run: |
          DEV_VERSION="${{ needs.get-version.outputs.version }}"
          echo "Building dev version: $DEV_VERSION"
          # Update Cargo.toml with dev version (temporary, not committed)
          sed -i.bak "s/^version = \".*\"/version = \"$DEV_VERSION\"/" Cargo.toml
        shell: bash

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: bindings-python
          command: build
          args: --release --out dist --interpreter python3.11 python3.12
          manylinux: ${{ matrix.platform.os == 'linux' && 'auto' || '' }}

      - name: Upload wheels to GitHub artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.os }}
          path: bindings-python/dist

  publish-to-pypi:
    name: Publish dev build to PyPI
    needs: build-wheels
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --skip-existing dist/*
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
